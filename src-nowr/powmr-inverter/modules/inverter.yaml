uart:
  - id: uart_inverter
    baud_rate: 2400
    tx_pin: ${inverter_tx_pin}
    rx_pin: ${inverter_rx_pin}
#    debug:
#      direction: BOTH
#      dummy_receiver: false

modbus:
  - id: modbus_inverter
    uart_id: uart_inverter
    send_wait_time: 250ms

modbus_controller:
  - id: smg_inverter
    address: 0x05
    modbus_id: modbus_inverter
    setup_priority: -10
    offline_skip_updates: 100
    command_throttle: 1s
    update_interval: ${update_interval}

sensor:

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Grid Voltage"
    id: grid_voltage
    address: 4502
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      if (id(grid_state).state == "Abnormal") {
        return 0.0;
      }
      return swapBytes(x);
    filters:
      - multiply: 0.1
      - offset: ${inverter_voltage_offset}
      - heartbeat: 10s

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Grid Frequency"
    address: 4503
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "PV Voltage"
    id: pv_voltage
    address: 4504
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "PV Power"
    id: pv_power
    address: 4505
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);

  - platform: template
    name: "PV Current"
    id: pv_current
    state_class: "measurement"
    device_class: current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    icon: mdi:solar-power
    lambda: |-
      if (id(pv_voltage).state == 0) {
        return 0;
      }
      return id(pv_power).state / id(pv_voltage).state;

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Voltage"
    id: battery_voltage
    address: 4506
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery SoC"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: battery
    address: 4507
    register_type: holding
    value_type: U_WORD
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Charge Current"
    id: battery_charge_current
    address: 4508
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery Discharge Current"
    id: battery_discharge_current
    address: 4509
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);

  - platform: template
    name: "Battery Current"
    id: battery_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      return id(battery_charge_current).state - id(battery_discharge_current).state;
    filters:
      - heartbeat: 10s

  - platform: template
    name: "Battery Power"
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${update_interval}
    lambda: |-
      return id(battery_current).state * id(battery_voltage).state;

  - platform: template
    name: "Battery Charge Power"
    id: battery_charge_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${update_interval}
    lambda: |-
      return id(battery_charge_current).state * id(battery_voltage).state;

  - platform: template
    name: "Battery Discharge Power"
    id: battery_discharge_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${update_interval}
    lambda: |-
      return id(battery_discharge_current).state * id(battery_voltage).state;

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Voltage"
    id: load_voltage
    address: 4510
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Frequency"
    address: 4511
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swapBytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Power VA"
    id: load_Power_VA
    address: 4512
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "VA"
    device_class: apparent_power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Power"
    id: load_power
    address: 4513
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swapBytes(x);

  - platform: template
    name: "Load Current"
    id: load_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 3
    update_interval: ${update_interval}
    lambda: |-
      if (id(load_voltage).state == 0) {
        return 0;
      }
      return id(load_Power_VA).state / id(load_voltage).state;

  - platform: template
    name: "Load Power Factor"
    id: load_power_factor
    device_class: power_factor
    state_class: measurement
    accuracy_decimals: 2
    update_interval: ${update_interval}
    lambda: |-
      if (id(load_Power_VA).state == 0) {
        return 0;
      }
      return id(load_power).state / id(load_Power_VA).state;

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "AC Out Load Percent"
    address: 4514
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load Percent"
    address: 4515
    register_count: 15
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Target Output Frequency"
    icon: mdi:cosine-wave
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4540
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    lambda: |-
      uint16_t value = swapBytes(x);
      switch (value) {
        case 0: return std::uint16_t(50);
        case 1: return std::uint16_t(60);
        default: return x;
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Max Total Charging Current"
    icon: mdi:battery-charging-100
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4541
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Target Output Voltage"
    icon: mdi:sine-wave
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4542
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Max Utility Charging Current"
    icon: mdi:transmission-tower-export
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4543
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Back To Utility Source Voltage"
    icon: mdi:transmission-tower-import
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4544
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Back To Battery Source Voltage"
    icon: mdi:power-plug-battery
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4545
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Bulk Charging Voltage"
    icon: mdi:battery-arrow-down
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4546
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Floating Charging Voltage"
    icon: mdi:battery-sync-outline
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4547
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Low CutOff Voltage"
    icon: mdi:battery-off
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4548
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swapBytes(x);

#  - platform: modbus_controller
#    modbus_controller_id: smg_inverter
#    name: "Battery Equalization Voltage"
#    icon: mdi:battery-medium
#    filters:
#      - multiply: 0.1
#    accuracy_decimals: 1
#    entity_category: diagnostic
#    address: 4549
#    register_type: holding
#    value_type: U_WORD
#    unit_of_measurement: "V"
#    lambda: |-
#      return swapBytes(x);

#  - platform: modbus_controller
#    modbus_controller_id: smg_inverter
#    name: "Battery Equalized Time"
#    icon: mdi:battery-clock-outline
#    accuracy_decimals: 0
#    entity_category: diagnostic
#    address: 4550
#    register_type: holding
#    value_type: U_WORD
#    lambda: |-
#      return swapBytes(x);

#  - platform: modbus_controller
#    modbus_controller_id: smg_inverter
#    name: "Battery Equalized Timeout"
#    icon: mdi:battery-remove-outline
#    accuracy_decimals: 0
#    entity_category: diagnostic
#    address: 4551
#    register_type: holding
#    value_type: U_WORD
#    lambda: |-
#      return swapBytes(x);

#  - platform: modbus_controller
#    modbus_controller_id: smg_inverter
#    name: "Equalization Interval"
#    icon: mdi:update
#    accuracy_decimals: 0
#    entity_category: diagnostic
#    address: 4552
#    register_count: 5
#    register_type: holding
#    value_type: U_WORD
#    lambda: |-
#      return swapBytes(x);

# something "Working State"/"Mains supply State" related...
# 2 - Line Mode, 7 - Invert Mode ... 
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Register4554"
    entity_category: diagnostic
    address: 4554
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

# something PV related...
# 0 - PV Undervoltage, 13 - PV Discharging, 11 - 
  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Register4556"
    entity_category: diagnostic
    address: 4556
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swapBytes(x);

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "PV Temperature"
    icon: mdi:thermometer-lines
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4557
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "°C"
    lambda: |-
      return swapBytes(x);

binary_sensor:

  - platform: template
    name: "Grid Active"
    id: grid_active
    lambda: |-
      if (id(grid_state).state == "Abnormal") {
        return false;
      } else {
        return true;
      }

  - platform: template
    name: "On Battery"
    id: on_battery
    lambda: |-
      if (id(battery_state).state == "Discharging") {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Load Enabled"
    id: load_enabled
    lambda: |-
      if (id(load_state).state == "Normal") {
        return true;
      } else {
        return false;
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Fan Locked"
    id: error_fan_locked
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x100

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Over Temperater"
    id: error_over_temperater
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x200

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Battery Voltage High"
    id: error_battery_voltage_high
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x400

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Battery Voltage Low"
    id: error_battery_voltage_low
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x800

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Output shorted"
    id: error_output_shorted
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x1000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - INV Voltage Over"
    id: error_inv_voltage_over
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x2000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Over Load"
    id: error_over_load
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Bus Voltage Over"
    id: error_bus_voltage_over
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x8000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Bus Soft Failed"
    id: error_bus_soft_failed
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - PV Voltage High"
    id: error_pv_voltage_high
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x2

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Over Current"
    id: error_over_current
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x4

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - Bus Voltage Under"
    id: error_bus_voltage_under
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x8

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - INV Soft Failed"
    id: error_inv_soft_failed
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x10

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - DC Voltage Over"
    id: error_dc_voltage_over
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x20

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - CT Fault"
    id: error_ct_fault
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x40

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Error - INV Voltage Low"
    id: error_inv_voltage_low
    internal: true
    entity_category: diagnostic
    address: 4529
    register_type: holding
    bitmask: 0x80

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - Fan Locked"
    id: alarm_fan_locked
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x100

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - Over Temperater"
    id: alarm_over_temperater
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x200

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - Battery Over Charged"
    id: alarm_battery_over_charged
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x400

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - Battery Voltage Low"
    id: alarm_battery_voltage_low
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x800

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - Over Load"
    id: alarm_over_load
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x1000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - Output Power Derating"
    id: alarm_output_power_derating
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x2000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - PV Energy Weak"
    id: alarm_pv_energy_weak
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - AC Voltage High"
    internal: true
    id: alarm_ac_voltage_high
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x8000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Alarm - No Battery"
    id: alarm_no_battery
    internal: true
    entity_category: diagnostic
    address: 4530
    register_type: holding
    bitmask: 0x1

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Record Fault Code"
    icon: mdi:alert-plus-outline
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x1

#  - platform: modbus_controller
#    modbus_controller_id: smg_inverter
#    name: "Battery Equalization"
#    icon: mdi:battery-arrow-up-outline
#    entity_category: diagnostic
#    address: 4535
#    register_type: holding
#    bitmask: 0x2

#  - platform: modbus_controller
#    modbus_controller_id: smg_inverter
#    name: "Battery Equalization activated immediately"
#    icon: mdi:battery-plus
#    entity_category: diagnostic
#    address: 4535
#    register_type: holding
#    bitmask: 0x4

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Buzzer Alarm"
    icon: mdi:speaker-wireless
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x100

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Power saving mode"
    icon: mdi:leaf-circle-outline
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x200

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Backlight"
    icon: mdi:alarm-light
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x400

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Restart On Overload"
    icon: mdi:restart
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x800

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Restart On Overheat"
    icon: mdi:restart-alert
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x1000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Beep On Primary Source Fail"
    icon: mdi:speaker-message
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x2000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Return To Default Screen"
    icon: mdi:backburger
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Overload Bypass"
    icon: mdi:transit-skip
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x8000

text_sensor:

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    id: Working_State
    name: "Working State"
    icon: mdi:state-machine
    entity_category: diagnostic
    address: 4501
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      switch (sensorIndex) {
        case 7: return std::string("ShutDown");
        case 3: return std::string("Invert Mode");
        case 4: return std::string("Line Mode");
        case 0: return std::string("Power On");
        case 5: return std::string("Bypass");
        case 1: return std::string("Test");
        case 6: return std::string("Fault Mode");
        case 2: return std::string("Stand By");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    id: charger_source_priority_text
    name: "Charger Source Priority"
    entity_category: diagnostic
    address: 4536
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      switch (sensorIndex) {
        case 0: return std::string("Solar first");
        case 1: return std::string("Solar and Utility");
        case 2: return std::string("Only solar");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Output Source Priority"
    entity_category: diagnostic
    address: 4537
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      switch (sensorIndex) {
        case 0: return std::string("Utility first (USB)");
        case 1: return std::string("Solar first (SUB)");
        case 2: return std::string("SBU priority");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "AC Input Voltage Range"
    icon: mdi:home-import-outline
    entity_category: diagnostic
    address: 4538
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      switch (value) {
        case 0: return std::string("Appliances");
        case 1: return std::string("UPS");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery type"
    icon: mdi:home-battery
    entity_category: diagnostic
    address: 4539
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = swapBytes(modbus_controller::word_from_hex_str(x, 0));
      switch (value) {
        case 0: return std::string("AGM");
        case 1: return std::string("Flooded");
        case 2: return std::string("User defined");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Battery State"
    id: battery_state
    icon: mdi:battery-unknown
    entity_category: diagnostic
    address: 4553
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint8_t val = modbus_controller::byte_from_hex_str(x, 0);
      val = val & 0x3;
      switch(val) {
        case 3: return std::string("Ok");
        case 1: return std::string("Discharging");
        case 2: return std::string("Charging");
        case 0: return std::string("Disconnected");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "PV State"
    icon: mdi:solar-power
    entity_category: diagnostic
    address: 4553
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint8_t val = modbus_controller::byte_from_hex_str(x, 0);
      val = val & 0xC;
      val = val >> 2;
      switch(val) {
        case 3: return std::string("Ok");
        case 1: return std::string("Discharging");
        case 2: return std::string("Overvoltage");
        case 0: return std::string("Undervoltage");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Mains supply State"
    id: grid_state
    icon: mdi:transmission-tower
    entity_category: diagnostic
    address: 4553
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint8_t val = modbus_controller::byte_from_hex_str(x, 0);
      val = val & 0x30;
      val = val >> 4;
      switch(val) {
        case 3: return std::string("Ok");
        case 1: return std::string("Absorption");
        case 2: return std::string("Discharging");
        case 0: return std::string("Abnormal");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Load State"
    id: load_state
    icon: mdi:lightning-bolt-circle
    entity_category: diagnostic
    address: 4553
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint8_t val = modbus_controller::byte_from_hex_str(x, 0);
      val = val & 0xC0;
      val = val >> 6;
      switch(val) {
        case 0: return std::string("Off");
        case 1: return std::string("Normal");
        case 2: return std::string("Overload");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: smg_inverter
    name: "Charger Status"
    icon: mdi:ev-station
    entity_category: diagnostic
    address: 4555
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = modbus_controller::word_from_hex_str(x, 0);
      switch (sensorIndex) {
        case 0x0a00:
          return std::string("Off");
        case 0x0c00:
          return std::string("Charge");
        case 0x0b00:
          return std::string("Pre-Charge");
        case 0x0d00:
          return std::string("Floating");
        default:
          return std::string("Unknown State");
      }

  - platform: template
    name: "Alarms"
    icon: mdi:shield-alert-outline
    lambda: |-
      std::string alarm_str;
      if (id(alarm_fan_locked).state) alarm_str += "Fan Locked;";
      if (id(alarm_over_temperater).state) alarm_str +=  "Over Temperater;";
      if (id(alarm_battery_over_charged).state) alarm_str += "Battery Over Charged;";
      if (id(alarm_battery_voltage_low).state) alarm_str += "Battery Voltage Low;";
      if (id(alarm_over_load).state) alarm_str += "Over Load;";
      if (id(alarm_output_power_derating).state) alarm_str += "Output Power Derating;";
      if (id(alarm_pv_energy_weak).state) alarm_str += "PV Energy Weak;";
      if (id(alarm_ac_voltage_high).state) alarm_str += "AC Voltage High;";
      if (id(alarm_no_battery).state) alarm_str += "No Battery;";
      if (alarm_str.length()==0) return std::string("None");
      return alarm_str;
    update_interval: 60s

  - platform: template
    name: "Errors"
    icon: mdi:alert-circle
    lambda: |-
      std::string error_str;
      if (id(error_fan_locked).state) error_str += "Fan Locked;";
      if (id(error_over_temperater).state) error_str += "Over Temperater;";
      if (id(error_battery_voltage_high).state) error_str += "Battery Voltage High;";
      if (id(error_battery_voltage_low).state) error_str += "Battery Voltage Low;";
      if (id(error_output_shorted).state) error_str += "Output shorted;";
      if (id(error_inv_voltage_over).state) error_str += "INV Voltage Over;";
      if (id(error_over_load).state) error_str += "Over Load;";
      if (id(error_bus_voltage_over).state) error_str += "Bus Voltage Over;";
      if (id(error_bus_soft_failed).state) error_str += "Bus Soft Failed;";
      if (id(error_pv_voltage_high).state) error_str += "PV Voltage High;";
      if (id(error_over_current).state) error_str += "Over Current;";
      if (id(error_bus_voltage_under).state) error_str += "Bus Voltage Under;";
      if (id(error_inv_soft_failed).state) error_str += "INV Soft Failed;";
      if (id(error_dc_voltage_over).state) error_str += "DC Voltage Over;";
      if (id(error_ct_fault).state) error_str += "CT Fault;";
      if (id(error_inv_voltage_low).state) error_str += "INV Voltage Low;";
      if (error_str.length()==0) return std::string("None");
      return error_str;
    update_interval: 60s
